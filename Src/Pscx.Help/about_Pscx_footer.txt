UTILITY APPLICATIONS
    Less-553
        Less-553 is a paging utility that PSCX installs. PSCX further provides
        a replacement "help" function that can uses the installed less.exe to 
        page help output. If you use either the "man" alias (an alias to help) 
        or the help function, the output will be paged using the PSCX "less"
        function which uses less.exe. By default, PSCX's "less" function will 
        use Less.exe to page its input.  If you want to temporarily avoid 
        using Less for paging when viewing help topics, you can use Get-Help 
        directly e.g.:
        
        PS> Get-Help Get-PSDrive -Full
        
        The primary commands you need to know in order to use less.exe are:
        Press 'q' to exit less.exe.  Press '/<some_term>[enter] to search the
        help topic for a specific term.  Press 'h' to get more help on how to 
        use less.exe.
        
        If you want to permanently suppress the usage of Less and revert back
        to PowerShell's default pager (more.com) set the 'PageHelpUsingLess' 
        preference variable to $false in your Pscx.UserPreferences.ps1 file.
        See the PREFERENCES VARIABLES section above for more information on
        customing PSCX.
               
        Using Less to browse help topics is significantly nicer than the 
        default paging in PowerShell. PSCX does not however redefine 
        PowerShell's "more" function to use Less because the way PowerShell 
        interops with legacy applications causes all output to be rendered to 
        text before it is sent to a legacy application. That makes commands 
        like the following take too much time to generate any output:
        
        PS> gci $env:windir -rec | less
        
    EchoArgs
        This is a simple legacy console application that can be very useful 
        when you are troubleshooting the invocation of a legacy application
        with complex parameters.  The typical problem is that you may think 
        the parameters are being passed literally to the legacy application 
        when in fact PowerShell is parsing the parameters via its standard
        parameter parsing and then passing the result to the legacy 
        application e.g.:
        
        PS> echoargs a /b -c -d:user /e:foo.cs;405
        Arg 0 is <a>
        Arg 1 is </b>
        Arg 2 is <-c>
        Arg 3 is <-d:user>
        Arg 4 is </e:foo.cs>

        Command line:
        "C:\Program Files (x86)\PowerShell Community Extensions\Pscx3\Pscx\
        Apps\EchoArgs.exe"  a /b -c -d:user /e:foo.cs

        405

        Notice that ';' is the statement separator in PowerShell so the '405' 
        part of the parameter '/e:foo.cs;405' is not even considered a 
        parameter to the legacy application.  These sort of problems are 
        typically solved by quoting the arguments to legacy applications e.g.:
        
        5> echoargs a /b -c -d:user '/e:foo.cs;405'
        Arg 0 is <a>
        Arg 1 is </b>
        Arg 2 is <-c>
        Arg 3 is <-d:user>
        Arg 4 is </e:foo.cs;405>

        Command line:
        "C:\Program Files (x86)\PowerShell Community Extensions\Pscx3\Pscx\
        Apps\EchoArgs.exe"  a /b -c -d:user /e:foo.cs;405

FEEDBACK
    Please submit any feedback, including defects and enhancement requests at: 

    https://github.com/Pscx/Pscx/issues

    We are also interested in suggestions you may have for generap purpose 
	cmdlets.

CREDITS
    This is a list of people and/or groups who have directly or indirectly
    helped by offering significant suggestions, code, certs or linkable 
    binaries without which PSCX would be a lesser product. In alphabetical 
    order:
    
    DigiCert for donating code signing certificates.
    http://www.digicert.com

    Eugene Sichkar / 7z Wrapper
    http://www.nomad-net.info/
    
    Igor Pavlov / 7-Zip
    http://www.7-zip.org/ 
    
    Mike Krueger/John Reilly #ZipLib
    http://www.icsharpcode.net/OpenSource/SharpZipLib/
    
    Richard Deeming / Trinet.Core.IO.Ntfs
    http://www.codeproject.com/KB/cs/ntfsstreams.aspx
    
    SevenZipSharp Team
    http://SevenZipSharp.codeplex.com

    The nUnit Team
    http://www.nunit.org/
    
    Wintellect for PowerCollections.dll
    http://www.wintellect.com/
    
SEE ALSO
    For more information, most of the cmdlets have help associated with 
    them e.g.:
    
    PS> help Get-Clipboard
    
    The definitive information on a cmdlet's parameters can be obtained
    by executing:
    
    PS> Get-Command Get-Clipboard -syntax
    
    or more tersely:
    
    PS> gcm get-clipboard -syn
